#include <stdio.h>
#define INF 9999

void distanceVector(int n, int cost[n][n]) {
    int dist[n][n];

    // Copy initial cost matrix
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            dist[i][j] = cost[i][j];
    for (int k = 0; k < n; k++)
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                if (dist[i][k] + dist[k][j] < dist[i][j])
                    dist[i][j] = dist[i][k] + dist[k][j];

    // Print results
    printf("\n--- Distance Vector Routing ---\n");
    for (int i = 0; i < n; i++) {
        printf("Router %c:\n", 'A' + i);
        for (int j = 0; j < n; j++)
            if (i != j)
                printf("  To %c cost = %d\n", 'A' + j, dist[i][j]);
    }
}

void linkState(int n, int cost[n][n], int src) {
    int dist[n], visited[n];

    // Initialize distances and visited
    for (int i = 0; i < n; i++) {
        dist[i] = INF;
        visited[i] = 0;
    }
    dist[src] = 0;

    // Dijkstraâ€™s algorithm
    for (int count = 0; count < n - 1; count++) {
        int u = -1, min = INF;
        for (int i = 0; i < n; i++)
            if (!visited[i] && dist[i] < min)
                min = dist[i], u = i;

        if (u == -1) break;
        visited[u] = 1;

        for (int v = 0; v < n; v++)
            if (!visited[v] && cost[u][v] != INF && dist[u] + cost[u][v] < dist[v])
                dist[v] = dist[u] + cost[u][v];
    }

    // Print results
    printf("Router %c:\n", 'A' + src);
    for (int i = 0; i < n; i++)
        if (i != src)
            printf("  To %c cost = %d\n", 'A' + i, dist[i]);
}

int main() {
    int n;
    printf("Enter number of routers: ");
    scanf("%d", &n);

    int cost[n][n];
    printf("Enter the cost adjacency matrix (use %d for no link):\n", INF);

    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &cost[i][j]);

    printf("\nSimple Routing Simulation\n=========================\n");

    distanceVector(n, cost);

    printf("\n--- Link State Routing ---\n");
    for (int i = 0; i < n; i++)
        linkState(n, cost, i);

    return 0;
}
