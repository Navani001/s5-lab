#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/select.h>

#define TCP_PORT 8080
#define UDP_PORT 9090
#define BUF 1024
#define SERVER_IP "127.0.0.1"

// ================= SERVER =================
void server() {
    int tcp_sock, udp_sock, new_sock, clients[10] = {0};
    struct sockaddr_in tcp_addr, udp_addr, cli;
    char buf[BUF];
    fd_set fds;
    socklen_t len;
    int max_sd, i;

    // TCP socket
    tcp_sock = socket(AF_INET, SOCK_STREAM, 0);
    tcp_addr.sin_family = AF_INET;
    tcp_addr.sin_addr.s_addr = INADDR_ANY;
    tcp_addr.sin_port = htons(TCP_PORT);
    bind(tcp_sock, (struct sockaddr*)&tcp_addr, sizeof(tcp_addr));
    listen(tcp_sock, 5);

    // UDP socket
    udp_sock = socket(AF_INET, SOCK_DGRAM, 0);
    udp_addr.sin_family = AF_INET;
    udp_addr.sin_addr.s_addr = INADDR_ANY;
    udp_addr.sin_port = htons(UDP_PORT);
    bind(udp_sock, (struct sockaddr*)&udp_addr, sizeof(udp_addr));

    printf("Server running (TCP:%d UDP:%d)\n", TCP_PORT, UDP_PORT);

    while (1) {
        FD_ZERO(&fds);
        FD_SET(tcp_sock, &fds);
        FD_SET(udp_sock, &fds);
        max_sd = (tcp_sock > udp_sock ? tcp_sock : udp_sock);

        for (i = 0; i < 10; i++) {
            if (clients[i]) {
                FD_SET(clients[i], &fds);
                if (clients[i] > max_sd) max_sd = clients[i];
            }
        }

        select(max_sd + 1, &fds, NULL, NULL, NULL);

        // New TCP client
        if (FD_ISSET(tcp_sock, &fds)) {
            len = sizeof(cli);
            new_sock = accept(tcp_sock, (struct sockaddr*)&cli, &len);
            for (i = 0; i < 10; i++)
                if (!clients[i]) { clients[i] = new_sock; break; }
            printf("New TCP client connected\n");
        }

        // UDP message
        if (FD_ISSET(udp_sock, &fds)) {
            len = sizeof(cli);
            int n = recvfrom(udp_sock, buf, BUF, 0, (struct sockaddr*)&cli, &len);
            buf[n] = '\0';
            printf("UDP: %s\n", buf);
            for (i = 0; i < 10; i++)
                if (clients[i]) send(clients[i], buf, strlen(buf), 0);
        }

        // TCP message
        for (i = 0; i < 10; i++) {
            if (clients[i] && FD_ISSET(clients[i], &fds)) {
                int n = recv(clients[i], buf, BUF, 0);
                if (n <= 0) {
                    close(clients[i]);
                    clients[i] = 0;
                    printf("TCP client left\n");
                } else {
                    buf[n] = '\0';
                    printf("TCP: %s\n", buf);
                    for (int j = 0; j < 10; j++)
                        if (clients[j]) send(clients[j], buf, strlen(buf), 0);
                }
            }
        }
    }
}

// ================= CLIENT =================
void client() {
    int tcp_sock, udp_sock;
    struct sockaddr_in serv, udp;
    fd_set fds;
    char buf[BUF];

    tcp_sock = socket(AF_INET, SOCK_STREAM, 0);
    serv.sin_family = AF_INET;
    serv.sin_port = htons(TCP_PORT);
    inet_pton(AF_INET, SERVER_IP, &serv.sin_addr);
    connect(tcp_sock, (struct sockaddr*)&serv, sizeof(serv));

    udp_sock = socket(AF_INET, SOCK_DGRAM, 0);
    udp.sin_family = AF_INET;
    udp.sin_port = htons(UDP_PORT);
    inet_pton(AF_INET, SERVER_IP, &udp.sin_addr);

    printf("Connected! Use 'u:<msg>' for UDP, otherwise TCP\n");

    while (1) {
        FD_ZERO(&fds);
        FD_SET(0, &fds);
        FD_SET(tcp_sock, &fds);
        select(tcp_sock + 1, &fds, NULL, NULL, NULL);

        if (FD_ISSET(0, &fds)) {
            fgets(buf, BUF, stdin);
            buf[strcspn(buf, "\n")] = 0;
            if (strncmp(buf, "u:", 2) == 0)
                sendto(udp_sock, buf + 2, strlen(buf + 2), 0,
                       (struct sockaddr*)&udp, sizeof(udp));
            else
                send(tcp_sock, buf, strlen(buf), 0);
        }

        if (FD_ISSET(tcp_sock, &fds)) {
            int n = recv(tcp_sock, buf, BUF, 0);
            if (n <= 0) break;
            buf[n] = '\0';
            printf("Server: %s\n", buf);
        }
    }
}

// ================= MAIN =================
int main(int c, char *v[]) {
    if (c != 2) {
        printf("Usage: %s [server|client]\n", v[0]);
        return 0;
    }
    if (!strcmp(v[1], "server")) server();
    else if (!strcmp(v[1], "client")) client();
    else printf("Invalid\n");
    return 0;
}
